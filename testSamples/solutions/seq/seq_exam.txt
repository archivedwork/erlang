Test, sequential
 

Task no. 0:
===========
Make sure to use only your repl to write the code and stay online all the time with your video on.

I will ask you to share with me the change file history, in case I suspect you did not write your solution.  So it is in your interest to do everything in repl and to not copy paste stuff.

Before starting copy the following declaration form to your test.erl file and fill in the required data:

~~~~

%% <Name>

%% <Neptun ID>

%% <DDS, TEST1>

%% <19.10.2020.>

%% This solution was submitted and prepared by <Name, Neptun ID> for the DDS Test Sequential.

%% I declare that this solution is my own work.

%% I have not copied or used third party solutions.

%% I have not passed my solution to my classmates, neither  made it public.

%% Students’ regulation of Eötvös Loránd University (ELTE Regulations Vol. II. 74/C. § ) states that as long as a student presents another student’s work - or at least the significant part of it - as his/her own performance, it will count as a disciplinary fault. The most serious consequence of a disciplinary fault can be dismissal of the student from the University.

~~~~

YOU CAN SOLVE THE TASKS IN ANY ORDER! HOWEVER  #2  CAN BE TESTED USING #1

Task no. 1: upDown
=================================
Using any approach (standard lib, recursion or any other solution are accepted), solve the following exercise:

Make a upDown/2 function that takes the number (this represent the Levels) and a string (this represent a Sentence). The function saves the sentence as if it was written in a “zigzag fashion” on the levels: the first character goes in level 1, second in 2 until the roof/last level and than goes down until the ground floor (Level 1), one step at a time,alternating up and downs until you run out of character. It should return a proper list containing tuples like so {current_level,current_character**}.  If the levels are 0 or less just return the atom cannot_do .

As a visual example, if the string is “ciaomamma” and the levels are 4, the sentence will be  

 

 

 

O

 

 

 

 

 

Level 4

 

 

A

 

M

 

 

 

A

Level 3

 

I

 

 

 

A

 

M

 

Level 2

C

 

 

 

 

 

M

 

 

Level 1

             

The function would return [{1,"c"}, {2,"i"}, {3,"a"}, {4,"o"}, {3,"m"}, {2,"a"}, {1,"m"}, {2,"m"}, {3,"a"}]

(** to help yourself visualize if the solution is correct you can store the characters as one element list/strings, so that they will printed like in my example and not as ASCII numbers)

 

~~~

upDown(integer(),list(string())) -> list(tuple(integer(),string()))

~~~

 

Test cases:

-----------

**Do not forget to change the name of the module!**

 

>test:upDown(4,"hello darkness my old friend").

[{1,"h"}, {2,"e"}, {3,"l"}, {4,"l"}, {3,"o"}, {2," "}, {1,"d"}, {2,"a"}, {3,"r"}, {4,"k"}, {3,"n"}, {2,"e"}, {1,"s"}, {2,"s"}, {3," "}, {4,"m"}, {3,"y"}, {2," "}, {1,"o"}, {2,"l"}, {3,"d"}, {4," "}, …]

>test:upDown(4,"h").                     

[{1,"h"}]

>test:upDown(0,"hi").

cannot_do

>test:upDown(3,"tryme").

[{1,"t"},{2,"r"},{3,"y"},{2,"m"},{1,"e"}]


 

Task no. 2: combiner
=================================
Using tail recursion and storing intermediate data either in a proper list or in a map, solve the following assignment:

Write the function combiner/1. The function takes a proper list of the same format as task 1, with elements like this: {levelnumber, "character"}. It puts together in a single string all the character in the same level (with the same key number) and finally concatenates them from Level 1 until the last.

combiner(upDown("ciaomamma")) would return "CMIAMAMAO" , that is taking all char in  level 1 "CM", then  level 2 "IAM", level 3 "AMA" until  level 4 "O",  in the order they are stored. 

~~~

combiner(list(tuple(integer(),string()))) -> string()

~~~

 

Test cases:

-----------

**Do not forget to change the name of the module!**

>test:combiner(test:upDown(3,"tryme")). 
"termy"

>test:combiner(test:upDown(2,"two steps example")).
"toseseapew tp xml" 

>test:combiner([{1,"p"},{2,"r"},{3,"o"},{2,"v"},{1,"a"}]).

"parvo"
>test:combiner([]). 
[]
 

Task no. 3: cutMove
=================================
Solve this exercise with a single function, without using libraries and without declaring helper functions. The same function name with different arity can be used to mask accumulators or counters if needed.

Make the function cutMove/3 that takes a list and cuts a chunk of size S starting from a position P in the list, moving it to the end of the list. If either P or S are going out of range the function should return the list unchanged.

For example [1,2,3,4,5] with S=2 and P=3  will cut 2 elements starting from the third position and put them at the end: [1,2] --cutting[3,4]--[5] thus  returning [1,2,5,3,4]

~~~

cutMove(list(),integer(),integer()) -> list()

~~~

**Do not forget to change the name of the module!**

Test cases:

-----------

> test:cutMove([],1,3).
[]

> test:cutMove([1,2,3,4,5,6,7],1,3).
[1,2,4,5,6,7,3]

> test:cutMove([1,2,3,4,5,6,7],3,5).
[1,2,3,4,5,6,7]

> test:cutMove([1,2,3],3,5). 
[1,2,3]


Task no. 4: randApply
=================================
any solution is ok as long as it is general enough

 

Make a function randApply/2 that takes a function F and a list L. For as many times as there are elements in the list L, take a random element from it and substitute it with the result of applying F to it. You can use rand:uniform(N) to create a random number from 1 to N. Make sure that at every substitution you print the value that is changing like in the examples below.

~~~

randApply(fun(),list()) -> list()

~~~

Test cases:

-----------

**since this are random, your result may be different **

>test:randApply(fun(E)-> E div 2 end ,[1,2,3,6,4,5]).
Changing element in position 5
New list [1,2,3,6,2,5]
Changing element in position 4
New list [1,2,3,3,2,5]
Changing element in position 2
New list [1,1,3,3,2,5]
Changing element in position 3
New list [1,1,1,3,2,5]
Changing element in position 1
New list [0,1,1,3,2,5]
Changing element in position 1
New list [0,1,1,3,2,5]
[0,1,1,3,2,5]

> test:randApply(fun(E)-> E+ 2 end ,[]). 
[]
> test:randApply(fun(E)-> E+ 2 end ,[1,2]). 
Changing element in position 1
New list [3,2]
Changing element in position 1
New list [5,2]
[5,2]

>test:randApply(fun(E,C)-> E+C end ,[1,2]). 
** exception error: interpreted function with arity 2 called with one argument